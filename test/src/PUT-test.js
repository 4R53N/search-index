import si from '../../dist/search-index.esm.js'
import test from 'tape'

const sandbox = 'test/sandbox/'
const indexName = sandbox + 'PUT'

test('create a search index', t => {
  t.plan(1)
  si({ name: indexName }).then(db => {
    global[indexName] = db    
    t.pass('ok')
  })
})

test('can add data', t => {
  const data = [
    {
      "_id": 0,
      "make": "Tesla",
      "manufacturer": "Volvo",
      "brand": "Volvo"
    },
    {
      "_id": 1,
      "make": "BMW",
      "manufacturer": "Volvo",
      "brand": "Volvo"
    },
    {
      "_id": 2,
      "make": "Tesla",
      "manufacturer": "Tesla",
      "brand": "Volvo"
    }
  ]
  t.plan(1)
  global[indexName].PUT(data).then(response =>
    t.deepEquals(response, [
      { _id: '0', status: 'OK', operation: 'PUT' },   
      { _id: '1', status: 'OK', operation: 'PUT' },   
      { _id: '2', status: 'OK', operation: 'PUT' }
    ])
  )
})


test('Verify that PUT has created an appropriate index', t => {
  const indexEntries = [
    {"key":"brand:volvo#1.00","value":["0","1","2"]},
    {"key":"make:bmw#1.00","value":["1"]},
    {"key":"make:tesla#1.00","value":["0","2"]},
    {"key":"manufacturer:tesla#1.00","value":["2"]},
    {"key":"manufacturer:volvo#1.00","value":["0","1"]},
    {"key":"￮DOCUMENT_COUNT￮","value":3},
    {"key":"￮DOC_RAW￮0￮","value":{"_id":0,"make":"Tesla","manufacturer":"Volvo","brand":"Volvo"}},
    {"key":"￮DOC_RAW￮1￮","value":{"_id":1,"make":"BMW","manufacturer":"Volvo","brand":"Volvo"}},
    {"key":"￮DOC_RAW￮2￮","value":{"_id":2,"make":"Tesla","manufacturer":"Tesla","brand":"Volvo"}},
    {"key":"￮DOC￮0￮","value":{"_id":"0","make":["tesla#1.00"],"manufacturer":["volvo#1.00"],"brand":["volvo#1.00"]}},
    {"key":"￮DOC￮1￮","value":{"_id":"1","make":["bmw#1.00"],"manufacturer":["volvo#1.00"],"brand":["volvo#1.00"]}},
    {"key":"￮DOC￮2￮","value":{"_id":"2","make":["tesla#1.00"],"manufacturer":["tesla#1.00"],"brand":["volvo#1.00"]}},
    {"key":"￮FIELD￮brand￮","value":"brand"},
    {"key":"￮FIELD￮make￮","value":"make"},
    {"key":"￮FIELD￮manufacturer￮","value":"manufacturer"},
  ]
  t.plan(indexEntries.length)
  global[indexName].INDEX.STORE.createReadStream().on('data', d => {
    t.deepEquals(d, indexEntries.shift())
  })
})

const autoGeneratedIds = []

test('can add data', t => {
  const data = [
    'this is a really interesting document',
    'this is a document about bananas',
    'This document is mostly oranges oranges oranges, not bananas.'
  ]
  t.plan(9)
  global[indexName].PUT(data).then(response => response.map(item => {
    t.equals(item.operation, 'PUT')
    t.equals(item.status, 'OK')
    t.match(item._id, /\d{13}-\d/gm, 'id has correct format')
    autoGeneratedIds.push(item._id)
  }))
})

test('Verify that PUT has created an appropriate index', t => {
  const indexEntries = [
    { key: 'body:a#1.00', value: [ autoGeneratedIds[0], autoGeneratedIds[1] ] },
    { key: 'body:about#1.00', value: [ autoGeneratedIds[1] ] },
    { key: 'body:bananas#0.33', value: [ autoGeneratedIds[2] ] },
    { key: 'body:bananas#1.00', value: [ autoGeneratedIds[1] ] },
    { key: 'body:document#0.33', value: [ autoGeneratedIds[2] ] },
    {
      key: 'body:document#1.00',
      value: [ autoGeneratedIds[0], autoGeneratedIds[1] ] 
    },
    { key: 'body:interesting#1.00', value: [ autoGeneratedIds[0] ] },
    { key: 'body:is#0.33', value: [ autoGeneratedIds[2] ] },
    {
      key: 'body:is#1.00',
      value: [ autoGeneratedIds[0], autoGeneratedIds[1] ] 
    },
    { key: 'body:mostly#0.33', value: [ autoGeneratedIds[2] ] },
    { key: 'body:not#0.33', value: [ autoGeneratedIds[2] ] },
    { key: 'body:oranges#1.00', value: [ autoGeneratedIds[2] ] },
    { key: 'body:really#1.00', value: [ autoGeneratedIds[0] ] },
    { key: 'body:this#0.33', value: [ autoGeneratedIds[2] ] },
    {
      key: 'body:this#1.00',
      value: [ autoGeneratedIds[0], autoGeneratedIds[1] ] 
    },
    { key: 'brand:volvo#1.00', value: [ '0', '1', '2' ] },
    { key: 'make:bmw#1.00', value: [ '1' ] },
    { key: 'make:tesla#1.00', value: [ '0', '2' ] },
    { key: 'manufacturer:tesla#1.00', value: [ '2' ] },
    { key: 'manufacturer:volvo#1.00', value: [ '0', '1' ] },
    { key: '￮DOCUMENT_COUNT￮', value: 6 },
    {
      key: '￮DOC_RAW￮0￮',
      value: { _id: 0, make: 'Tesla', manufacturer: 'Volvo', brand: 'Volvo' }
    },
    {
      key: '￮DOC_RAW￮1￮',
      value: { _id: 1, make: 'BMW', manufacturer: 'Volvo', brand: 'Volvo' }
    },
    {
      key: '￮DOC_RAW￮2￮',
      value: { _id: 2, make: 'Tesla', manufacturer: 'Tesla', brand: 'Volvo' }
    },
    {
      key: '￮DOC_RAW￮undefined￮',
      value: 'This document is mostly oranges oranges oranges, not bananas.'
    },
    {
      key: '￮DOC￮0￮',
      value: {
        _id: '0',
        make: [ 'tesla#1.00' ],
        manufacturer: [ 'volvo#1.00' ],
        brand: [ 'volvo#1.00' ]
      }
    },
    {
      key: '￮DOC￮' + autoGeneratedIds[0] + '￮',
      value: {
        body: [
          'a#1.00',
          'document#1.00',
          'interesting#1.00',
          'is#1.00',
          'really#1.00',
          'this#1.00'
        ],
        _id: autoGeneratedIds[0]
      }
    },
    {
      key: '￮DOC￮' + autoGeneratedIds[1] + '￮',
      value: {
        body: [
          'a#1.00',
          'about#1.00',
          'bananas#1.00',
          'document#1.00',
          'is#1.00',
          'this#1.00'
        ],
        _id: autoGeneratedIds[1]
      }
    },
    {
      key: '￮DOC￮' + autoGeneratedIds[2] + '￮',
      value: {
        body: [
          'bananas#0.33',
          'document#0.33',
          'is#0.33',
          'mostly#0.33',
          'not#0.33',
          'oranges#1.00',
          'this#0.33'
        ],
        _id: autoGeneratedIds[2]
      }
    },
    {
      key: '￮DOC￮1￮',
      value: {
        _id: '1',
        make: [ 'bmw#1.00' ],
        manufacturer: [ 'volvo#1.00' ],
        brand: [ 'volvo#1.00' ]
      }
    },
    {
      key: '￮DOC￮2￮',
      value: {
        _id: '2',
        make: [ 'tesla#1.00' ],
        manufacturer: [ 'tesla#1.00' ],
        brand: [ 'volvo#1.00' ]
      }
    },
    { key: '￮FIELD￮body￮', value: 'body' },
    { key: '￮FIELD￮brand￮', value: 'brand' },
    { key: '￮FIELD￮make￮', value: 'make' },
    { key: '￮FIELD￮manufacturer￮', value: 'manufacturer' }
    
  ]
  t.plan(indexEntries.length)
  global[indexName].INDEX.STORE.createReadStream().on('data', d => t.deepEqual(d, indexEntries.shift()))
})

